package br.com.caelum.financas.apps;

import javax.persistence.EntityManager;

import br.com.caelum.financas.modelo.Conta;
import br.com.caelum.financas.util.JPAUtil;

public class BuscaConta {

	public static void main(String[] args) {

		EntityManager em = new JPAUtil().getEntityManager();
		em.getTransaction().begin();

		Conta conta = em.find(Conta.class, 1);//id da conta, deve aceitar o mesmo tipo
		System.out.println(conta);

		conta.setAgencia("456");
		// conta.setTitular("Carlos Eduardo");
		conta.setTitular("João");

		System.out.println(conta.getTitular());

		em.getTransaction().commit();

	}
}

/*
 * Executando-se a classe, além de buscar e imprimir, o Hibernate realizou um
 * update, que verificamos se está correto no terminal, digitando select * from
 * Conta;. Como será que isto ocorre? A JPA conseguiu sincronizar os dados da
 * Conta com os do registro do banco de dados.
 * 
 * Isto acontece porque o método find() nos devolve uma instância de Conta
 * considerado como estado Managed (gerenciado), estado da entidade da JPA cujos
 * dados são automaticamente sincronizados com o banco de dados.
 * 
 * Caso quiséssemos alterar a agência, por exemplo, por meio de
 * conta.setAgencia("456");, repare que apenas um update será feito, pois será
 * verificado que o nome continua sendo "João", alterando-se apenas a agência.
 * 
 * Se repetirmos a mesma execução, o Hibernate realiza apenas a busca, sem
 * nenhum update, pois nenhuma alteração foi feita, ou seja, a conta em memória
 * é igual à conta no banco de dados.
 * 
 * Com o JPA, o objetivo é sempre trazer os objetos para o estado Managed, já
 * que assim eles serão gerenciados e automaticamente sincronizados com o banco.
 * 
 *
 * 
 * 
 */