package br.com.caelum.jdbc.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import br.com.caelum.jdbc.modelo.Produtos;

/*
 * DataAccessObject - DAO
 */
public class ProdutosDAO {

	private final Connection conn;

	/*
	 * O DAO é um padrão de design que utilizamos para isolar o código SQL (ou
	 * qualquer outro código de acesso à um repositório de dados). Ao adotá-lo,
	 * sabemos que existe um único grupo de classes que trabalha com um sistema
	 * externo de dados, e podemos nos preocupar somente com essas classes quando
	 * trabalharmos nessa área.
	 * 
	 * 
	 */
	public ProdutosDAO(Connection conn) {

		this.conn = conn;
	}

	public void salva(Produtos produto) throws SQLException {

		String sql = "insert into Produto (nome, descricao) values(?, ?)";

		try (PreparedStatement statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
			statement.setString(1, produto.getNome());
			statement.setString(2, produto.getDescricao());

			statement.execute();
			try (ResultSet rs = statement.getGeneratedKeys()) {
				if (rs.next()) {
					int id = rs.getInt("id");
					produto.setId(id);
				}
			}

		}

	}

	public List<Produtos> lista() throws SQLException {


		String sql = "select * from Produto";

		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.execute();

		}

		return produtos;
	}

	private void transformaResultadoEmProdutos(PreparedStatement stmt, List<Produtos> produtos) throws SQLException {
		try (ResultSet resultSet = stmt.getResultSet()) {
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String nome = resultSet.getString("nome");
				String descricao = resultSet.getString("descricao");

				Produtos produto = new Produtos(nome, descricao);
				produto.setId(id);

				produtos.add(produto);
			}
		}
	}

}
